<%- include('../partials/user/header.ejs') %>

    <style>
        .order-card {
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .order-card:hover {
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
        }

        .table th,
        .table td {
            vertical-align: middle;
        }
    </style>

    <main class="main">
        <div class="container py-5">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">My Orders</li>
                </ol>
            </nav>

            <div class="card order-card mt-4">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Your Orders</h3>
                </div>
                <div class="card-body">
                    <% if (orders.length===0) { %>
                        <p class="text-center">You haven't placed any orders yet.</p>
                        <% } else { %>
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Order ID</th>
                                            <th>Date</th>
                                            <th>Total</th>
                                            <th>Order Status</th>
                                            <th>Payment Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% orders.forEach(order=> { %>
                                            <tr>
                                                <td>
                                                    <%= order.orderId %>
                                                </td>
                                                <td>
                                                    <%= new Date(order.createdAt).toLocaleDateString() %>
                                                </td>
                                                <td>$<%= order.finalAmount.toFixed(2) %>
                                                </td>


                                                <td>
                                                    <span class="badge bg-<%= 
        order.status === 'Placed' ? 'primary' :
        order.status === 'Pending' ? 'warning' :
        order.status === 'Processing' ? 'info' :
        order.status === 'Shipped' ? 'success' :
        order.status === 'Confirmed' ? 'success' :
        order.status === 'Delivered' ? 'success' :
        order.status === 'Cancelled' ? 'danger' :
        order.status === 'Return Request' ? 'warning' :
        order.status === 'Returned' ? 'dark' : 'danger' 
    %>">
                                                        <%= order.status %>
                                                    </span>
                                                </td>
                                                <% let badgeColor; if (order.paymentStatus==='Paid' ) {
                                                    badgeColor='success' ; } else if (order.paymentStatus==='Failed' ) {
                                                    badgeColor='danger' ; } else if (order.paymentStatus==='Pending' ) {
                                                    badgeColor='warning' ; } else if (order.paymentStatus==='Refunded' )
                                                    { badgeColor='info' ; }else
                                                    if(order.paymentStatus==='Refund Pending' ){ badgeColor='secondary'
                                                    }else if(order.paymentStatus==='Payment Pending' ){
                                                    badgeColor='warning' } else { badgeColor='primary' ; } %>
                                                    <td><span class="badge bg-<%= badgeColor %>">
                                                            <%= order.paymentStatus %>
                                                        </span></td>



                                                    <td>
                                                        <a href="/track-order/<%= order.orderId%>"
                                                            class="btn btn-sm btn-outline-info">Track Order</a>
                                                        <% if(order.paymentStatus==='Failed' ) {%>
                                                            <button class="btn  btn-sm" style="background-color:red;"
                                                                onclick="retryPayment('<%= order.orderId %>')">Retry
                                                                Payment</button>

                                                            <% } %>

                                                    </td>
                                            </tr>
                                            <% }); %>
                                    </tbody>
                                </table>
                            </div>

                            <% if (totalPages> 1) { %>
                                <nav aria-label="Page navigation" class="mt-4">
                                    <ul class="pagination justify-content-center">
                                        <% for (let i=1; i <=totalPages; i++) { %>
                                            <li class="page-item <%= currentPage == i ? 'active' : '' %>">
                                                <a class="page-link" href="/orders?page=<%= i %>">
                                                    <%= i %>
                                                </a>
                                            </li>
                                            <% } %>
                                    </ul>
                                </nav>
                                <% } %>
                                    <% } %>
                </div>
            </div>
        </div>
    </main>




    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>
        function retryPayment(orderId) {
            // Display loading state
            Swal.fire({
                title: 'Processing',
                text: 'Initiating payment retry...',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            // First, create a new Razorpay order for the failed payment
            fetch('/createRetryPayment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ orderId })
            })
                .then(response => response.json())
                .then(orderData => {
                    Swal.close()
                    if (orderData.success) {
                        // Initialize Razorpay with the new order details
                        const options = {
                            key: 'rzp_test_trhZpz0cQLRJsN', // Replace with your key
                            amount: orderData.amount,
                            currency: orderData.currency,
                            name: 'Perfume Castle',
                            description: 'Payment Retry',
                            order_id: orderData.orderId,
                            handler: function (response) {
                                verifyPayment(response, orderId);
                            },
                            prefill: {
                                name: orderData.customerName,
                                email: orderData.customerEmail,
                                contact: orderData.customerPhone
                            },
                            theme: {
                                color: '#3399cc'
                            }
                        };

                        const rzp = new Razorpay(options);
                        rzp.on('payment.failed', function (response) {
                            fetch('/updatePaymentStatus', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    orderId: orderId,
                                    razorpayOrderId: response.error.metadata.order_id,
                                    status: 'Failed',
                                    error: response.error.description
                                })
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        Swal.fire({
                                            text: 'Payment failed: ' + response.error.description,
                                            icon: 'error',
                                            confirmButtonText: 'Ok'
                                        });
                                    }
                                })
                                .catch(error => {
                                    console.error('Error updating payment status:', error);
                                    Swal.fire({
                                        text: 'An error occurred while processing payment failure',
                                        icon: 'error',
                                        confirmButtonText: 'Ok'
                                    });
                                });
                        });
                        rzp.open();
                    } else {
                        Swal.fire({
                            text: orderData.message || 'Unable to initiate payment retry',
                            icon: 'error',
                            confirmButtonText: 'Ok'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.close()
                    Swal.fire({
                        text: 'Unable to initiate payment retry',
                        icon: 'error',
                        confirmButtonText: 'Ok'
                    });
                });
        }


        function verifyPayment(paymentResponse, orderId) {
                    fetch('/verifyRazorpayPayment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            razorpay_payment_id: paymentResponse.razorpay_payment_id,
                            razorpay_order_id: paymentResponse.razorpay_order_id,
                            razorpay_signature: paymentResponse.razorpay_signature,
                            orderId: orderId
                        })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Payment successful, update order status and redirect to orders page
                                
                                //window.location.href = '/orderSuccess?orderId=' + data.orderId;
                                window.location.href = '/orders'
                            } else {

                                Swal.fire({
                                    title: 'Payment verification failed',
                                    text: data.message || 'Payment verification failed',
                                    icon: 'error',
                                    confirmButtonText: 'Try Again'

                                })

                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            // Update payment status on error
                            updatePaymentStatus(orderId, paymentResponse.razorpay_order_id);
                            Swal.fire({
                                title: 'Payment error',
                                text: 'An error occurred while verifying the payment',
                                icon: 'error',
                                confirmButtonText: 'Try Again'
                            })
                        });
                }
    </script>

    <%- include('../partials/user/footer.ejs') %>