<%- include('../partials/user/header.ejs') %>
<!-- Add SweetAlert2 CSS -->
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css"
/>

    <section>
        <div class="section my-5 py-5">
            <div class="container my-5 py-5">
                <div class="row justify-content-center">
                    <div class="col-sm-12 col-md-6">
                        <div class="card p-4">
                            <h3 class="text-center mb-4">Email</h3>

                            <form id="verifyEmailForm" >

                                

                                <div class="form-group">

                                    <input type="email" class="form-control" id="emailInput" name="email"
                                        placeholder="Emai">
                                        <div id="emailError" style=" color:red;"></div>
                                </div>
                                <div class="text-center">
                                    <button type="submit" class="btn btn-outline-primary-2 ">
                                        <span>Verify</span>
                                    </button>
                                </div>
                                <div class="text-center mt-5">
                                    <p>Don't have an account? <a href="/register" class="text-decoration-none">Create
                                            Account</a></p>
                                </div>


                            </form>
                        </div>
                    </div>
                </div>
            </div>


        </div>



    </section>



    <script>

   // Server-side controller (passwordReset.js)
const passwordReset = async (req, res) => {
    try {
        const { email } = req.body;
        console.log("Received email:", email);
        
        const findUser = await User.findOne({ email: email });
        console.log('found user:', findUser);
        
        if (findUser) {
            const otp = generateOtpForPasswordReset();
            const emailSent = await sendEmail(email, otp);
            console.log('emailsent:', emailSent);
            
            if (emailSent) {
                req.session.userOtp = otp;
                req.session.email = email;
                console.log('session updated:', req.session);
                
                // Return JSON response instead of rendering
                return res.status(200).json({
                    success: true,
                    message: 'Email verified, redirecting to OTP page'
                });
            } else {
                console.log('Failed to send OTP');
                return res.status(400).json({
                    success: false,
                    message: 'Failed to send OTP, please try again'
                });
            }
        } else {
            console.log('User not found');
            return res.status(404).json({
                success: false,
                message: 'User with this email does not exist.'
            });
        }
        
    } catch (error) {
        console.log('Error in passwordReset:', error);
        return res.status(500).json({
            success: false,
            message: 'An error occurred',
            error: error.message
        });
    }
};

// Client-side JavaScript
document.getElementById('verifyEmailForm').addEventListener('submit', function(e) {
    e.preventDefault();
    let isValid = true;
    
    var email = document.getElementById('emailInput').value;
    var emailError = document.getElementById('emailError');
    
    emailError.textContent = '';
    
    if (!email.trim()) {
        emailError.textContent = 'Email is required';
        isValid = false;
    }
    
    if (isValid) {
        // Show loading state
        Swal.fire({
            title: 'Processing...',
            text: 'Please wait while we verify your email',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });
        
        // Send email verification request to server
        fetch('/passwordReset', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ email: email })
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(data => Promise.reject(data));
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                Swal.fire({
                    title: 'Success!',
                    text: 'Email verified successfully',
                    icon: 'success'
                }).then(() => {
                    // Redirect to OTP verification page
                    window.location.href = '/verify-otp-forPwd';
                });
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: data.message || 'Email verification failed, please try again',
                    icon: 'error'
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                title: 'Error!',
                text: error.message || 'An error occurred while verifying email',
                icon: 'error'
            });
        });
    }
});
    
    </script>

<!--Sweet alert-->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>