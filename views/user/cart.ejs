<%- include('../partials/user/header.ejs') %>
    <style>
        .qty-up.disabled {
            opacity: 0.5;
            pointer-events: none;
            /* Prevents clicking */
        }

        .out-of-stock {
            color: red;
            font-weight: bold;
        }

        .qty-btn {
            cursor: pointer;
            user-select: none;
        }

        .qty-btn.disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .custom-toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            min-width: 300px;
            padding: 16px 20px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            font-size: 14px;
            font-weight: 500;
            z-index: 9999;
            opacity: 0;
            transform: translateY(100%);
            transition: all 0.3s ease-in-out;
        }

        .custom-toast.show {
            opacity: 1;
            transform: translateY(0);
        }

        .custom-toast.success {
            background-color: #4CAF50;
            color: white;
            box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3);
        }

        .custom-toast.error {
            background-color: #f44336;
            color: white;
            box-shadow: 0 4px 12px rgba(244, 67, 54, 0.3);
        }

        .custom-toast .toast-content {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .custom-toast .toast-icon {
            font-size: 20px;
        }

        .custom-toast .toast-close {
            cursor: pointer;
            padding: 4px;
            color: white;
            opacity: 0.7;
            transition: opacity 0.2s;
        }

        .custom-toast .toast-close:hover {
            opacity: 1;
        }

        .custom-toast+.custom-toast {
            margin-bottom: 10px;
        }
    </style>
    <main class="main">
        <div class="page-header breadcrumb-wrap">
            <div class="container">
                <div class="breadcrumb">
                    <a href="/" rel="nofollow">Home</a>
                    <span></span> Shop
                    <span></span> Your Cart
                </div>
            </div>
        </div>


        <section class="mt-50 mb-50">
            <div class="container">
                <div class="row">
                    <div class="col-12">

                        <div class="table-responsive">
                            <table class="table shopping-summery text-center clean">
                                <thead>
                                    <tr class="main-heading">
                                        <th scope="col">Image</th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Price</th>
                                        <th scope="col">Quantity</th>
                                        <th scope="col">Subtotal</th>
                                        <th scope="col">Remove</th>
                                    </tr>
                                </thead>
                                <tbody id="cart-items">

                                    <% if(cartItems && cartItems.length> 0){ %>
                                        <% cartItems.forEach(function(item){ %>
                                            <% if(item.productId) { %>
                                                <tr data-productid="<%= item.productId._id %>">
                                                    <td class="image product-thumbnail"><img
                                                            src="/uploads/re-image/<%=item.productId.productImage[0]%>"
                                                            alt="<%= item.productId.productName%>"></td>
                                                    <td class="product-des product-name">
                                                        <h5 class="product-name"><a href="">
                                                                <%= item.productId.productName %>
                                                            </a></h5>
                                                        <p class="font-xs">
                                                            <%= item.productId.description %>
                                                        </p>


                                                        <p class="font-xs stock-info">In stock: <span
                                                                class="stock-quantity">
                                                                <%= item.productId.quantity %>
                                                            </span></p>

                                                        <% if (item.productId.quantity===0) { %>
                                                            <p class="text-danger">Out of Stock</p>
                                                            <% hasOutOfStockItem=true; %>
                                                                <!-- Set the flag if out of stock -->
                                                                <% } %>
                                                    </td>
                                                    <td class="price" data-title="Price"> <span>$<%=
                                                                item.price.toFixed(2) %></span></td>

                                                    <td class="text-center" data-title="Stock">
                                                        <div class="detail-qty border radius  m-auto">
                                                            <!--Button for decreasing the quantity-->
                                                            <a href="#" class="qty-down"
                                                                onclick="handleQuantityChange(event, false)"
                                                                data-min-qty="1"><i
                                                                    class="fi-rs-angle-small-down"></i></a>
                                                            <span class="qty-val" data-quantity="<%= item.quantity %>"
                                                                data-price="<%= item.price %>"
                                                                data-max-stock="<%= item.productId.quantity %>"
                                                                data-max-qty-per-user="5">
                                                                <%= item.quantity %>
                                                            </span>
                                                            <a href="#" class="qty-up"
                                                                onclick="handleQuantityChange(event, true)"
                                                                data-max-stock="<%= item.productId.quantity %>"
                                                                id="qty-up-<%= item.productId._id %>"><i
                                                                    class="fi-rs-angle-small-up"></i></a>
                                                        </div>
                                                    </td>
                                                    <td class="text-right" data-title="Cart">
                                                        <span>$<%= item.totalPrice.toFixed(2) %></span>
                                                    </td>
                                                    <td class="action" data-title="Remove"><a href="#"
                                                            class="text-muted remove-item"><i
                                                                class="fi-rs-trash"></i></a></td>
                                                </tr>
                                                <% } %>
                                                    <% }) %>
                                                        <% } else { %>
                                                            <tr>
                                                                <td colspan="6">Your cart is empty.</td>
                                                            </tr>
                                                            <% } %>
                                                                <tr>
                                                                    <td colspan="6" class="text-end">
                                                                        <a href="#" class="text-muted clear-cart"> <i
                                                                                class="fi-rs-cross-small"></i> Clear
                                                                            Cart</a>
                                                                    </td>
                                                                </tr>
                                </tbody>
                            </table>
                        </div>
                        <div class="cart-action text-end">
                            <a class="btn mr-10 mb-sm-15 " href="#"><i class="fi-rs-shuffle mr-10"></i>Update
                                Cart</a>
                            <a class="btn" href="/product"><i class="fi-rs-shopping-bag mr-10"></i>Continue Shopping</a>
                        </div>

                        <div class="divider center_icon mt-50 mb-50"><i class="fi-rs-fingerprint"></i></div>
                        <div class="row mb-50">
                            <div class="col-lg-6 col-md-12">
                                <div class="heading_s1 mb-3">
                                    <h4>Calculate Shipping</h4>
                                </div>
                                <p class="mt-15 mb-30">Flat rate: <span class="font-xl text-brand fw-900">%</span></p>
                                <form class="field_form shipping_calculator">
                                    <div class="form-row">
                                        <div class="form-group col-lg-12">
                                            <div class="custom_select">
                                                <select class="form-control select-active">
                                                    <option value="">Choose a option...</option>
                                                    <option value="AX">Aland Islands</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-row row">
                                        <div class="form-group col-lg-6">
                                            <input required="required" placeholder="State / Country" name="name"
                                                type="text">
                                        </div>
                                        <div class="form-group col-lg-6">
                                            <input required="required" placeholder="PostCode / ZIP" name="name"
                                                type="text">
                                        </div>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group col-lg-12">
                                            <form action="" method="POST">
                                                <button type="submit" class="btn btn-sm"><i
                                                        class="fi-rs-shuffle mr-10"></i>Update</button>
                                            </form>
                                        </div>
                                    </div>
                                </form>

                                <!--<div class="mb-30 mt-50">
                                    <div class="heading_s1 mb-3">
                                        <h4>Apply Coupon</h4>
                                    </div>
                                    <div class="total-amount">
                                        <div class="left">
                                            <div class="coupon">
                                                <form id="coupon-form">
                                                    <div class="form-row row justify-content-center">
                                                        <div class="form-group col-lg-6">
                                                            <input class="font-medium" name="couponCode"
                                                                id="coupon-code" placeholder="Enter Your Coupon">
                                                        </div>
                                                        <div class="form-group col-lg-6">
                                                            <button type="submit" class="btn btn-sm"><i
                                                                    class="fi-rs-label mr-10"></i>Apply</button>
                                                        </div>
                                                    </div>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                </div>-->
                            </div>



                            <div class="col-lg-6 col-md-12">
                                <div class="border p-md-4 p-30 border-radius cart-totals">
                                    <div class="heading_s1 mb-3">
                                        <h4>Cart Totals</h4>
                                    </div>
                                    <div class="table-responsive">
                                        <table class="table">
                                            <tbody>

                                                <tr>
                                                    <td class="cart_total_label">Cart Subtotal</td>
                                                    <td class="cart_total_amount"><span
                                                            class="font-lg fw-900 text-brand" id="cart-subtotal"
                                                            data-cart-subtotal>$
                                                            <%= cartTotalPrice.toFixed(2) %>
                                                        </span></td>
                                                </tr>
                                                <tr>
                                                    <td class="cart_total_label">Shipping</td>
                                                    <td class="cart_total_amount"> <i class="ti-gift mr-5"></i> Free
                                                        Shipping</td>
                                                </tr>


                                                <tr>
                                                    <td class="cart_total_label">Total</td>
                                                    <td class="cart_total_amount"><strong><span
                                                                class="font-xl fw-900 text-brand" id="cart-total"
                                                                data-cart-total>
                                                                $<%= cartTotalPrice.toFixed(2) %></span></strong>
                                                    </td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                    <a href="/checkout" class="btn <%= hasOutOfStockItem ? 'disabled' : '' %>"
                                        <%=hasOutOfStockItem ? 'disabled' : '' %> > <i class="fi-rs-box-alt mr-10"></i>
                                        Proceed To
                                        CheckOut</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main>



    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Toast functionality
            function showToast(message, isError = false) {
                const toastContainer = document.getElementById('toast-container') || createToastContainer();
                const toast = document.createElement('div');
                const toastId = 'toast-' + Date.now();

                toast.className = `custom-toast ${isError ? 'error' : 'success'}`;
                toast.id = toastId;
                toast.innerHTML = `
            <div class="toast-content">
                <span class="toast-icon">${isError ? '⚠️' : '✅'}</span>
                <span class="toast-message">${message}</span>
            </div>
            <span class="toast-close" onclick="closeToast('${toastId}')">&times;</span>
        `;

                toastContainer.appendChild(toast);
                setTimeout(() => toast.classList.add('show'), 10);
                setTimeout(() => closeToast(toastId), 3000);
                adjustToastPositions();
            }

            function createToastContainer() {
                const container = document.createElement('div');
                container.id = 'toast-container';
                container.style.cssText = 'position: fixed; bottom: 20px; right: 20px; z-index: 9999;';
                document.body.appendChild(container);
                return container;
            }

            function closeToast(toastId) {
                const toast = document.getElementById(toastId);
                if (toast) {
                    toast.classList.remove('show');
                    setTimeout(() => {
                        toast.remove();
                        adjustToastPositions();
                    }, 300);
                }
            }

            function adjustToastPositions() {
                const toasts = document.querySelectorAll('.custom-toast');
                let bottomOffset = 20;
                toasts.forEach((toast) => {
                    toast.style.bottom = bottomOffset + 'px';
                    bottomOffset += toast.offsetHeight + 10;
                });
            }

            // Quantity change handler
            window.handleQuantityChange = async function (event, isIncrement) {
                event.preventDefault();
                const row = event.target.closest('tr');
                const productId = row.getAttribute('data-productid');
                const qtyElement = row.querySelector('.qty-val');
                const currentQty = parseInt(qtyElement.getAttribute('data-quantity'));
                const maxStock = parseInt(qtyElement.getAttribute('data-max-stock'));
                const maxQtyPerUser = parseInt(qtyElement.getAttribute('data-max-qty-per-user'));
                const pricePerItem = parseFloat(qtyElement.getAttribute('data-price'));

                let newQuantity = isIncrement ? currentQty + 1 : currentQty - 1;

                if (newQuantity < 1 || newQuantity > maxStock || newQuantity > maxQtyPerUser) {
                    showToast(newQuantity < 1 ? "Quantity cannot be less than 1" :
                        newQuantity > maxStock ? `Only ${maxStock} items available in stock` :
                            `You can only add up to ${maxQtyPerUser} of this item`, true);
                    return;
                }

                try {
                    const response = await fetch('/updateCart', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ productId, newQuantity })
                    });

                    const data = await response.json();
                    if (data.success) {
                        qtyElement.innerText = newQuantity;
                        qtyElement.setAttribute('data-quantity', newQuantity);
                        row.querySelector('[data-title="Cart"] span').innerText = `$${(pricePerItem * newQuantity).toFixed(2)}`;
                        updateCartTotals(data.cartSubTotal);
                        showToast('Cart updated successfully');

                        // Update stock info and button states
                        const stockInfoElement = row.querySelector('.stock-quantity');
                        if (stockInfoElement) stockInfoElement.innerText = maxStock - newQuantity;
                        row.querySelector('.qty-down').classList.toggle('disabled', newQuantity <= 1);
                        row.querySelector('.qty-up').classList.toggle('disabled', newQuantity >= Math.min(maxStock, maxQtyPerUser));
                    } else {
                        showToast(data.error || 'Failed to update cart', true);
                    }
                } catch (error) {
                    console.error('Error updating cart:', error);
                    showToast('An error occurred while updating the cart', true);
                }
            };

            // Remove item handler
            async function handleRemoveItem(event) {
                const removeButton = event.target.closest('.remove-item');
                if (!removeButton) return;

                event.preventDefault();
                const row = removeButton.closest('tr');
                const productId = row.getAttribute('data-productid');

                if (!confirm('Are you sure you want to remove this item?')) return;

                try {
                    const response = await fetch(`/deleteCartItem/${productId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });

                    const data = await response.json();
                    if (data.success) {
                        row.style.transition = 'opacity 0.3s';
                        row.style.opacity = '0';
                        setTimeout(() => {
                            row.remove();
                            updateCartTotals(data.cartSubTotal || 0);
                            showToast('Item removed successfully');
                            if (document.querySelectorAll('tr[data-productid]').length === 0) {
                                location.reload();
                            }
                        }, 300);
                    } else {
                        throw new Error(data.error || 'Failed to remove item');
                    }
                } catch (error) {
                    console.error('Error removing item:', error);
                    showToast(error.message || 'Failed to remove item', true);
                }
            }

            // Clear cart handler
            async function handleClearCart(event) {
                event.preventDefault();
                if (!confirm('Are you sure you want to clear your cart?')) return;

                try {
                    const response = await fetch('/clearCart', { method: 'POST', headers: { 'Content-Type': 'application/json' } });
                    const data = await response.json();

                    if (data.success) {
                        showToast('Cart cleared successfully');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        throw new Error(data.error || 'Failed to clear cart');
                    }
                } catch (error) {
                    console.error('Error clearing cart:', error);
                    showToast(error.message || 'Failed to clear cart', true);
                }
            }

            // Update cart totals
            function updateCartTotals(cartSubTotal) {
                const formattedTotal = parseFloat(cartSubTotal).toFixed(2);
                const subtotalElement = document.querySelector("#cart-subtotal");
                const totalElement = document.querySelector("#cart-total");

                if (subtotalElement) subtotalElement.innerText = `$${formattedTotal}`;
                if (totalElement) totalElement.innerText = `$${formattedTotal}`;
            }

            // Set up event listeners
            document.querySelector('table').addEventListener('click', handleRemoveItem);

            document.querySelectorAll('.qty-up, .qty-down').forEach(button => {
                button.addEventListener('click', (e) => handleQuantityChange(e, button.classList.contains('qty-up')));
            });

            const clearCartButton = document.querySelector(".clear-cart");
            if (clearCartButton) {
                clearCartButton.addEventListener('click', handleClearCart);
            }

            // Initial state check for quantity buttons
            document.querySelectorAll('.qty-val').forEach((qtyVal) => {
                const currentQty = parseInt(qtyVal.getAttribute('data-quantity'));
                const maxStock = parseInt(qtyVal.getAttribute('data-max-stock'));
                const maxQtyPerUser = parseInt(qtyVal.getAttribute('data-max-qty-per-user'));
                const row = qtyVal.closest('tr');

                row.querySelector('.qty-down').classList.toggle('disabled', currentQty <= 1);
                row.querySelector('.qty-up').classList.toggle('disabled', currentQty >= Math.min(maxStock, maxQtyPerUser));
            });
        });
    </script>

    <!---
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const qtyUpButtons = document.querySelectorAll(".qty-up");
            const qtyDownButtons = document.querySelectorAll(".qty-down");

            const removeButtons = document.querySelectorAll(".remove-item");
            const clearCartButton = document.querySelector(".clear-cart");

            const cartSubtotal = document.getElementById('cart-subtotal');
            const cartTotal = document.getElementById('cart-total');


            //-----------------------------------------------------------------------------------------------------
            function showToast(message, isError = false) {
                const toastContainer = document.getElementById('toast-container') || createToastContainer();
                const toast = document.createElement('div');
                const toastId = 'toast-' + Date.now();

                toast.className = `custom-toast ${isError ? 'error' : 'success'}`;
                toast.id = toastId;

                toast.innerHTML = `
                <div class="toast-content">
                    <span class="toast-icon">${isError ? '⚠️' : '✅'}</span>
                    <span class="toast-message">${message}</span>
                </div>
                <span class="toast-close" onclick="closeToast('${toastId}')">&times;</span>
            `;

                toastContainer.appendChild(toast);

                // Trigger animation
                setTimeout(() => {
                    toast.classList.add('show');
                }, 10);

                // Auto-remove after duration
                setTimeout(() => {
                    closeToast(toastId);
                }, 3000);

                // Adjust positions of existing toasts
                adjustToastPositions();
            }

            // Add these new helper functions
            function createToastContainer() {
                const container = document.createElement('div');
                container.id = 'toast-container';
                container.style.cssText = 'position: fixed; bottom: 20px; right: 20px; z-index: 9999;';
                document.body.appendChild(container);
                return container;
            }

            function closeToast(toastId) {
                const toast = document.getElementById(toastId);
                if (toast) {
                    toast.classList.remove('show');
                    setTimeout(() => {
                        toast.remove();
                        adjustToastPositions();
                    }, 300);
                }
            }

            function adjustToastPositions() {
                const toasts = document.querySelectorAll('.custom-toast');
                let bottomOffset = 20;

                toasts.forEach((toast) => {
                    toast.style.bottom = bottomOffset + 'px';
                    bottomOffset += toast.offsetHeight + 10;
                });
            }


            //---------------------------------handle quantity change ----------------------------------------------------
            async function handleQuantityChange(event, isIncrement) {
                event.preventDefault();
                const row = event.target.closest('tr');
                const productId = row.getAttribute('data-productid');
                const qtyElement = row.querySelector('.qty-val');
                const currentQty = parseInt(qtyElement.getAttribute('data-quantity'));
                const maxStock = parseInt(qtyElement.getAttribute('data-max-stock'));
                const maxQtyPerUser = parseInt(qtyElement.getAttribute('data-max-qty-per-user'));
                const pricePerItem = parseFloat(qtyElement.getAttribute('data-price'));


                let newQuantity = isIncrement ? currentQty + 1 : currentQty - 1;

                if (newQuantity < 1) {
                    showToast("Quantity cannot be less than 1", true);
                    return;
                }

                if (newQuantity > maxStock) {
                    showToast(`Only ${maxStock} items available in stock`, true);
                    return;
                }

                if (newQuantity > maxQtyPerUser) {
                    showToast(`You can only add up to ${maxQtyPerUser} of this item`, true);
                    return;
                }

                try {
                    const response = await fetch('/updateCart', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ productId, newQuantity })
                    });

                    const data = await response.json();
                    if (data.success) {
                        qtyElement.innerText = newQuantity;
                        qtyElement.setAttribute('data-quantity', newQuantity);

                        const itemTotalPrice = (pricePerItem * newQuantity).toFixed(2);
                        row.querySelector('[data-title="Cart"] span').innerText = `$${itemTotalPrice}`;

                        updateCartTotals(data.cartSubTotal);
                        showToast('Cart updated successfully');

                        // Update stock info
                        const stockInfoElement = row.querySelector('.stock-quantity');
                        if (stockInfoElement) {
                            stockInfoElement.innerText = maxStock - newQuantity;
                        }
                        // Disable/enable buttons based on new quantity
                        row.querySelector('.qty-down').classList.toggle('disabled', newQuantity <= 1);
                        row.querySelector('.qty-up').classList.toggle('disabled', newQuantity >= Math.min(maxStock, maxQtyPerUser));
                    } else {
                        showToast(data.error || 'Failed to update cart', true);
                    }
                } catch (error) {
                    console.error('Error updating cart:', error);
                    showToast('An error occurred while updating the cart', true);
                }




                //---------------------------------------function to update cart total--------------------------


                function updateCartTotals(subtotal, discount, finalTotal) {
                    const formattedSubtotal = parseFloat(subtotal).toFixed(2);
                  

                    if (cartSubtotal) cartSubtotal.innerText = `$${formattedSubtotal}`;
                   

                    
                }
                
                // Use event delegation for remove buttons
                document.querySelector('table').addEventListener('click', handleRemoveItem);

                // Add other event listeners
                qtyUpButtons.forEach(button => {
                    button.addEventListener('click', (e) => handleQuantityChange(e, true));
                });

                qtyDownButtons.forEach(button => {
                    button.addEventListener('click', (e) => handleQuantityChange(e, false));
                });

                if (clearCartButton) {
                    clearCartButton.addEventListener('click', handleClearCart);
                }

                // Initial state check for quantity buttons
                document.querySelectorAll('.qty-val').forEach((qtyVal) => {
                    const currentQty = parseInt(qtyVal.getAttribute('data-quantity'));
                    const maxStock = parseInt(qtyVal.getAttribute('data-max-stock'));
                    const maxQtyPerUser = parseInt(qtyVal.getAttribute('data-max-qty-per-user'));
                    const row = qtyVal.closest('tr');

                    row.querySelector('.qty-down').classList.toggle('disabled', currentQty <= 1);
                    row.querySelector('.qty-up').classList.toggle('disabled', currentQty >= Math.min(maxStock, maxQtyPerUser));
                });


                //------------------------------------------------------------
                async function handleRemoveItem(event) {
                    event.preventDefault();

                    // Check if the clicked element or its parent is a remove-item button
                    const removeButton = event.target.closest('.remove-item');
                    if (!removeButton) return;

                    const row = removeButton.closest('tr');
                    if (!row) {
                        showToast('Could not find item to remove', true);
                        return;
                    }

                    const productId = row.getAttribute('data-productid');
                    if (!productId) {
                        showToast('Invalid product information', true);
                        return;
                    }

                    try {
                        if (!confirm('Are you sure you want to remove this item?')) return;

                        const response = await fetch(`/deleteCartItem/${productId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',

                            }
                        });

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        const data = await response.json();

                        if (data.success) {
                            // Fade out animation before removing
                            row.style.transition = 'opacity 0.3s';
                            row.style.opacity = '0';

                            setTimeout(() => {
                                row.remove();
                                updateCartTotals(data.cartSubTotal || 0);
                                showToast('Item removed successfully');

                                // Check if cart is empty
                                const remainingItems = document.querySelectorAll('tr[data-productid]');
                                if (remainingItems.length === 0) {
                                    location.reload();
                                }
                            }, 300);
                        } else {
                            throw new Error(data.error || 'Failed to remove item');
                        }
                    } catch (error) {
                        console.error('Error removing item:', error);
                        showToast(error.message || 'Failed to remove item', true);
                    }
                }

                // Updated clear cart handler with better error handling
                async function handleClearCart(event) {
                    event.preventDefault();

                    try {
                        if (!confirm('Are you sure you want to clear your cart?')) return;

                        const response = await fetch('/clearCart', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',

                            }
                        });

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        const data = await response.json();

                        if (data.success) {
                            showToast('Cart cleared successfully');
                            setTimeout(() => location.reload(), 1000);
                        } else {
                            throw new Error(data.error || 'Failed to clear cart');
                        }
                    } catch (error) {
                        console.error('Error clearing cart:', error);
                        showToast(error.message || 'Failed to clear cart', true);
                    }
                }

                // Helper function to update cart totals
                function updateCartTotals(cartSubTotal) {
                    const formattedTotal = parseFloat(cartSubTotal).toFixed(2);
                    const subtotalElement = document.querySelector("#cart-subtotal");
                    const totalElement = document.querySelector("#cart-total");

                    if (subtotalElement) {
                        subtotalElement.innerText = `$${formattedTotal}`;
                    }
                    if (totalElement) {
                        totalElement.innerText = `$${formattedTotal}`;
                    }
                }

                // Use event delegation for remove buttons
                document.querySelector('table').addEventListener('click', handleRemoveItem);

                // Add other event listeners
                qtyUpButtons.forEach(button => {
                    button.addEventListener('click', (e) => handleQuantityChange(e, true));
                });

                qtyDownButtons.forEach(button => {
                    button.addEventListener('click', (e) => handleQuantityChange(e, false));
                });

                if (clearCartButton) {
                    clearCartButton.addEventListener('click', handleClearCart);
                }
            })
    </script>-->


    <%- include('../partials/user/footer.ejs') %>