<%- include('../partials/admin/sidebar.ejs') %>
    <%- include('../partials/admin/header.ejs') %>

        <section class="content-main">
            <div class="alert alert-danger" id="errorAlert" style="display: none;"></div>
            <div class="alert alert-success" id="successAlert" style="display: none;"></div>
        
            <form action="/admin/editProduct/<%= product._id %>" method="post" enctype="multipart/form-data"
                id="editProductForm">

                <div class="row">
                    <div class="col-9">
                        <div class="content-header">
                            <h2 class="content-title">Edit Product</h2>

                        </div>
                    </div>

                    <div class="col-lg-6">
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="mb-4">
                                    <label for="productName" class="form-label">Product Name</label>
                                    <input type="text" class="form-control" id="productName" name="productName"
                                        value="<%= product.productName %>" required>
                                    <small id="productName-error" class="error-message"
                                        style="color: #dc3545; display: none; font-size: 0.875rem; margin-top: 0.25rem;"></small>
                                </div>
                                <div class="mb-4">
                                    <label for="description" class="form-label">Description</label>
                                    <textarea class="form-control" rows="4" id="description" name="description"
                                        
                                        required><%= product.description %></textarea>
                                    <small id="description-error" class="error-message"
                                        style="color: #dc3545; display: none; font-size: 0.875rem; margin-top: 0.25rem;"></small>

                                </div>
                            </div>
                        </div> <!-- card end// -->

                        <!-- Brand and categories -->
                        <div class="card mb-4">
                            <div class="card-body">

                                <div class="mb-4">
                                    <label class="form-label" name="brand">Brand</label>
                                    <select class="form-select" name="brand" id="brand">
                                        <option value="">Select Brand</option>
                                        <% brand.forEach(b=> { %>

                                            <option value="<%=b._id %>" <%= product.brand &&
                                                product.brand.toString() === b._id.toString() ? 'selected' : '' %>>
                                                <%= b.brandName %>
                                            </option>
                                            <% }) %>
                                    </select>

                                    <small id="brand-error" class="error-message"
                                        style="color: #dc3545; display: none; font-size: 0.875rem; margin-top: 0.25rem;"></small>

                                </div>
                                <div class="mb-4">
                                    <label class="form-label">Categories</label>
                                    <select class="form-select" name="category" id="category" required>
                                        <option value="">Select Category</option>
                                        <% categories.forEach(c=> { %>
                                            <option value="<%= c._id %>" <%= product.category &&
                                                product.category.toString() === c._id.toString() ? 'selected' : '' %>>
                                                <%= c.name %>
                                            </option>
                                            <% }) %>
                                    </select>
                                    <small id="category-error" class="error-message"
                                        style="color: #dc3545; display: none; font-size: 0.875rem; margin-top: 0.25rem;"></small>
                                </div>
                            </div>
                        </div> <!-- card end// -->

                        <!-- Image upload with preview and crop -->
                        <div class="card mb-4">
                            <div class="card-header">
                                <h4>Product Images</h4>
                            </div>
                            <div class="card-body">
                                <div class="row g-3">
                                    <% if(product.productImage && product.productImage.length> 0){ %>
                                        <% for(let i=0;i<product.productImage.length;i++){ %>
                                            <div class="col-md-4">
                                                <div style="position: relative; display: inline-block;">
                                                    <img src="/uploads/re-image/<%= product.productImage[i] %>"
                                                        alt="<%=product.productName%>" class="img-fluid rounded"
                                                        style="max-width: 200px;border:1px solid #dee2e6; padding:0.25rem;" />
                                                    <button type="button" style="font-size: 10px;"
                                                        class="btn btn-danger  btn-sm position-absolute top-0 end-0 me-4"
                                                        onclick="deleteSingleImage('<%= product.productImage[i] %>', '<%= product._id %>')">
                                                        <i class="fa fa-trash  fa-sm" style="color: white;"></i>
                                                    </button>
                                                </div>
                                            </div>
                                            <% } %>
                                                <% } %>
                                </div>
                            </div>
                            <div class="card-header">
                                <h4>Upload New Images</h4>
                            </div>
                            <div class="card-body">
                                <% for(let i=1; i<=3; i++) { %>
                                    <div class="mb-4">
                                        <div style="position: relative;">
                                            <input type="file" id="input<%= i %>" name="images" class="form-control"
                                                accept="image/png,image/jpg,image/jpeg"
                                                onchange="viewImage<%= i %>(event), viewImage(event, <%= i %>)">
                                            <div class="mt-2">
                                                <!-- Cropper container -->
                                                <div class="image-cropper" id="cropperContainer<%= i %>"
                                                    style="display: none; margin-top: 10px;">
                                                    <img src="" id="croppedImg<%= i %>" alt=""
                                                        style="max-width: 100%; margin-bottom: 10px;">
                                                    <img id="imgView<%= i %>" alt="Preview"
                                                        style="max-width: 100%; display: none;">
                                                    <button type="button" id="saveButton<%= i %>"
                                                        class="btn btn-primary mt-2">
                                                        Save Crop
                                                    </button>
                                                </div>
                                                <!-- Preview container -->
                                                <div class="preview-container"
                                                    style="position: relative; display: inline-block;">
                                                    <img id="finalPreview<%= i %>" alt="Final Preview"
                                                        class="img-fluid rounded"
                                                        style="max-width: 200px; display: none; border: 1px solid #dee2e6; padding: 0.25rem;">
                                                    <button type="button" id="deleteIcon<%= i %>"
                                                        class="btn btn-danger btn-sm position-absolute top-0 end-0 me-"
                                                        style="display: none;" onclick="removeImage(<%= i %>)">
                                                        <i class="fa fa-trash"></i>
                                                    </button>
                                                </div>
                                            </div>
                                            <small id="image<%= i %>-error"
                                                style="color: #dc3545; display: none; font-size: 0.875rem; margin-top: 0.25rem;"></small>
                                        </div>
                                    </div>
                                    <% } %>
                            </div>

                        </div>
                    </div>


                    <!-- Pricing and Quantity -->
                    <div class="col-lg-3">
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="mb-4">
                                    <label for="ml" class="form-label">ML</label>
                                    <select class="form-select" name="ml" id="ml" required>
                                        <option <%=product.ml==100 ? 'selected' : '' %>>100</option>
                                        <option <%=product.ml==50 ? 'selected' : '' %>>50</option>
                                    </select>
                                    <small id="ml-error" class="error-message"
                                        style="color: #dc3545; display: none; font-size: 0.875rem; margin-top: 0.25rem;"></small>

                                </div>
                                <div class="mb-4">
                                    <label for="regularPrice" class="form-label"> Regular Price</label>
                                    <input type="number" step="1" class="form-control" name="regularPrice"
                                        id="regularPrice" value="<%= product.regularPrice %>" required>
                                    <small id="regularPrice-error" class="error-message"
                                        style="color: #dc3545; display: none; font-size: 0.875rem; margin-top: 0.25rem;"></small>
                                </div>
                                <div class="mb-4">
                                    <label for="productOffer" class="form-label">Product Offer</label>
                                    <input type="number" step="1" class="form-control" name="productOffer"
                                        id="productOffer" value="<%= product.productOffer %>" required>
                                    <small id="productOffer-error" class="error-message"
                                        style="color: #dc3545; display: none; font-size: 0.875rem; margin-top: 0.25rem;"></small>

                                </div>
                                <div class="mb-4">
                                    <label for="salePrice" class="form-label">Sale Price</label>
                                    <input type="number" step="1" class="form-control" name="salePrice"
                                        id="salePrice" value="<%= product.salePrice %>" required>
                                    <small id="salePrice-error" class="error-message"
                                        style="color: #dc3545; display: none; font-size: 0.875rem; margin-top: 0.25rem;"></small>

                                </div>

                                <div class="mb-4">
                                    <label for="quantity" class="form-label">Quantity</label>
                                    <input type="number" step="1" placeholder="Type here" class="form-control"
                                        name="quantity" id="quantity" value="<%= product.quantity %>" required>
                                    <small id="quantity-error" class="error-message"
                                        style="color: #dc3545; display: none; font-size: 0.875rem; margin-top: 0.25rem;"></small>

                                </div>


                            </div> <!-- card end// -->
                            <div class="text-center">
                                <button class="btn btn-md rounded font-sm hover-up" type="submit">Update
                                    Product</button>
                            </div>
                        </div>
                    </div>
                </div>
                </div>

            </form>
        </section>

        <script>
            document.getElementById('editProductForm').addEventListener('submit', async function (e) {
                e.preventDefault();

                if (!validateForm()) {
                    return false;
                }

                const formData = new FormData(this);
                

                try {
                    const response = await fetch(`/admin/editProduct/<%=product._id%>`, {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.json();

                    if (result.status === 'success') {
                        alert(result.message);
                        window.location.href = '/admin/products'; // Redirect to products list
                    } else {
                        alert(result.message);
                    }
                } catch (error) {
                    alert('An error occurred while updating the product');
                }
            });


            function viewImage1(event) {
                document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])

            }
            function viewImage2(event) {
                document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])

            }
            function viewImage3(event) {
                document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])

            }
            function viewImage(event, index) {
                let input = event.target
                let reader = new FileReader()

                reader.onload = function () {
                    let dataURL = reader.result
                    let image = document.getElementById('imgView' + index)
                    let cropperContainer = document.getElementById('cropperContainer' + index);


                    image.src = dataURL
                    image.style.display = 'block'
                    cropperContainer.style.display = 'block'

                    // Destroy existing cropper if any
                    if (window['cropper' + index]) {
                        window['cropper' + index].destroy();
                    }

                    // Initialize new cropper
                    window['cropper' + index] = new Cropper(image, {
                        aspectRatio: 1,
                        viewMode: 1,
                        guides: true,
                        background: false,
                        autoCropArea: 1,
                        zoomable: true,
                        minCropBoxWidth: 100,
                        minCropBoxHeight: 100,
                    });


                    // Save button event handler
                    document.getElementById('saveButton' + index).onclick = function () {
                        let canvas = window['cropper' + index].getCroppedCanvas();
                        let croppedImage = document.getElementById('croppedImg' + index);
                        let finalPreview = document.getElementById('finalPreview' + index);
                        let deleteIcon = document.getElementById('deleteIcon' + index);

                        // Display cropped image
                        croppedImage.src = canvas.toDataURL('image/jpeg', 1.0);
                        finalPreview.src = canvas.toDataURL('image/jpeg', 1.0);

                        // Show final preview and delete button
                        finalPreview.style.display = 'block';
                        deleteIcon.style.display = 'block';

                        // Hide cropper container
                        cropperContainer.style.display = 'none';

                        // Convert canvas to blob and create new file input
                        canvas.toBlob(function (blob) {
                            let timestamp = new Date().getTime();
                            let fileName = `cropped-img-${timestamp}-${index}.jpg`;
                            let newFile = new File([blob], fileName, { type: 'image/jpeg' });

                            // Create new FileList with cropped image
                            let dataTransfer = new DataTransfer();
                            dataTransfer.items.add(newFile);
                            input.files = dataTransfer.files;
                        }, 'image/jpeg', 1.0);
                    };
                };

                reader.readAsDataURL(input.files[0]);
            }
            function removeImage(index) {
                const input = document.getElementById(`input${index}`);
                const cropperContainer = document.getElementById(`cropperContainer${index}`);
                const finalPreview = document.getElementById(`finalPreview${index}`);
                const deleteIcon = document.getElementById(`deleteIcon${index}`);

                // Clear input and hide all related elements
                input.value = '';
                cropperContainer.style.display = 'none';
                finalPreview.style.display = 'none';
                deleteIcon.style.display = 'none';

                // Destroy cropper instance if exists
                if (window['cropper' + index]) {
                    window['cropper' + index].destroy();
                    window['cropper' + index] = null;
                }
            }

            const selectedImages = []
            document.getElementById('input1').addEventListener('change', handleFileSelect)

            function handleFileSelect(event) {
                const addedImagesContainer = document.getElementById('addedImageContainer')
                addedImagesContainer.innerHTML = ''
                const files = event.target.files
                for (let i = 0; i < files.length; i++) {
                    const file = files[i]
                    selectedImages.push(file)
                    const thumbnail = document.createElement('div')
                    thumbnail.classList.add('thumbnail')

                    const img = document.createElement('img')
                    img.src = URL.createObjectURL(file)
                    img.alt = 'thumbnail'
                    img.style.width = '50px'
                    img.style.height = 'auto'

                    const removeIcon = document.createElement('span')
                    removeIcon.classList.add('remove-icon')
                    removeIcon.innerHTML = '&times'
                    removeIcon.addEventListener('click', function () {
                        const index = selectedImages.indexOf(file)
                        if (index !== -1) {
                            selectedImages.splice(index, 1)
                        }
                        thumbnail.remove()
                    })
                    thumbnail.appendChild(img)
                    thumbnail.appendChild(removeIcon)
                    addedImagesContainer.appendChild(thumbnail)

                }

            }




            function deleteSingleImage(imageId, productId) {
                if (confirm("Are you sure you want to delete this image?")) {
                    fetch('/admin/deleteImage', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            imageToServer: imageId,
                            productToServer: productId

                        })


                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.status === true) {
                                alert('Image deleted successfully');
                                location.reload();
                            } else {
                                alert(data.message || 'Failed to delete image');
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('An error occurred while deleting the image');
                        });
                }
            }
            function validateForm() {
                clearErrorMessages();
                let isValid = true;
                const validations = {
                    productName: {
                        element: document.getElementsByName('productName')[0],
                        rules: [
                            {
                                test: value => value.trim() !== "",
                                message: "Product name is required"
                            },
                            {
                                test: value => /^[a-zA-Z\s]{3,50}$/.test(value.trim()),
                                message: "Product name should contain only letters and spaces (3-50 characters)"
                            }
                        ]
                    },
                    description: {
                        element: document.getElementById('description'),
                        rules: [
                            {
                                test: value => value.trim().length >= 10,
                                message: "Description must be at least 10 characters long"
                            },
                            {
                                test: value => /^[a-zA-Z0-9\s.,!?-]{10,500}$/.test(value.trim()),
                                message: "Description contains invalid characters"
                            }
                        ]
                    },
                    regularPrice: {
                        element: document.getElementsByName('regularPrice')[0],
                        rules: [
                            {
                                test: value => /^\d+(\.\d{1,2})?$/.test(value) && parseFloat(value) > 0,
                                message: "Please enter a valid positive price"
                            }
                        ]
                    },
                    productOffer: {
                        element: document.getElementsByName('productOffer')[0],
                        rules: [

                            {
                                test: value => {
                                    // Remove '%' symbol before validating
                                    let numericValue = value.replace('%', '');

                                    // Validate if the numeric value is a number between 0 and 100
                                    return /^\d+(\.\d{1,2})?$/.test(numericValue) && parseFloat(numericValue) >= 0 && parseFloat(numericValue) <= 100;
                                },
                                message: "Please enter a valid offer percentage (0-100)"
                            }
                        ]
                    },
                    salePrice: {
                        element: document.getElementsByName('salePrice')[0],
                        rules: [
                            {
                                test: value => /^\d+(\.\d{1,2})?$/.test(value) && parseFloat(value) >= 0,
                                message: "Please enter a valid sale price"
                            }
                        ]
                    },
                    quantity: {
                        element: document.getElementsByName('quantity')[0],
                        rules: [
                            {
                                test: value => /^\d+$/.test(value) && parseInt(value) > 0,
                                message: "Please enter a valid quantity"
                            }
                        ]
                    }
                };

                // Perform validations
                for (const [fieldName, validation] of Object.entries(validations)) {
                    const { element, rules } = validation;
                    for (const rule of rules) {
                        if (!rule.test(element.value)) {
                            displayErrorMessage(`${fieldName}-error`, rule.message);
                            isValid = false;
                            break;
                        }
                    }
                }

                // Cross-field validations
                const regularPrice = parseFloat(document.getElementsByName('regularPrice')[0].value);
                const salePrice = parseFloat(document.getElementsByName('salePrice')[0].value);
                if (regularPrice < salePrice) {
                    displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price');
                    isValid = false;
                }

                return isValid;
            }


            function displayErrorMessage(elementId, message) {
                const errorElement = document.getElementById(elementId);
                if (errorElement) {
                    errorElement.textContent = message;
                    errorElement.style.display = 'block';
                }
            }

            function clearErrorMessages() {
                const errorElements = document.querySelectorAll('[id$="-error"]');
                errorElements.forEach(element => {
                    element.style.display = 'none';
                    element.textContent = '';
                });
            }



        </script>




        <%- include('../partials/admin/footer.ejs') %>
